name: CI

on:
  push:
    branches: [trunk]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  USE_FAKE_EVENT_JSON: test_data/event_json/minimal_pr_opened.json

jobs:
  checks:
    runs-on: ubuntu-latest
    name: ubuntu / ${{ matrix.toolchain }}
    strategy:
      matrix:
        # run on stable and beta to ensure that tests won't break on the next version of the rust
        # toolchain
        toolchain: [stable, beta]
    steps:
      - uses: actions/checkout@v4
      - name: Install ${{ matrix.toolchain }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          components: rustfmt,clippy
      - uses: Swatinem/rust-cache@v2

      - name: Run tests
        run: cargo test

      - name: Check lints (clippy)
        uses: giraffate/clippy-action@v1
        with:
          reporter: 'github-pr-check'
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check formatting
        run: cargo fmt --check

  # run cargo test on mac and windows
  os-check:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} / stable
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2

      - name: Run tests
        run: cargo test

  coverage:
    # use llvm-cov to build and collect coverage and outputs in a format that
    # is compatible with codecov.io
    runs-on: ubuntu-latest
    name: ubuntu / stable / coverage
    steps:
      - uses: actions/checkout@v4
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: cargo install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - uses: Swatinem/rust-cache@v2

      - name: cargo llvm-cov
        run: cargo llvm-cov --locked --all-features --lcov --output-path lcov.info

      - name: Record Rust version
        run: echo "RUST=$(rustc --version)" >> "$GITHUB_ENV"

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          env_vars: OS,RUST

  audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: rustsec/audit-check@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  typos:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check spelling of entire workspace
        uses: crate-ci/typos@master

  test-run:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2

      - name: Build
        run: cargo build

      - name: Run fake
        if: ${{ github.event_name }} == pull_request
        env:
          RUST_LOG: DEBUG
          GH_TOKEN: ${{ github.token }}
          PUSH_TOKEN: ${{ github.token }}
        run: cargo run -- "CHANGELOG.md" "📝 Update [dep] from [old] to [new]" "Some commit message" "github-actions[bot]" "github-actions[bot]@users.noreply.github.com" "Unreleased" "section header 3" "false"

  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
          - os: macos-latest
          - os: windows-latest
            file_extension: .exe

    runs-on: ${{ matrix.os }}
    env:
      binary_name: dependabot-changelog-writer${{ matrix.file_extension }}

    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2

      - name: Build docker rust-musl-builder
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: docker build -t rust-musl-builder .
          
      - name: Build Linux MUSL binary with Docker
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            rust-musl-builder
            
      - name: Build macos
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          export OPENSSL_INCLUDE_DIR=$(brew --prefix openssl)/include
          export OPENSSL_LIB_DIR=$(brew --prefix openssl)/lib
          cargo build --release

      - name: Build windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: cargo build --release

      - name: Copy Artifact Windows/MacOs
        if: ${{ matrix.os != 'ubuntu-latest' }}
        run: cp target/release/${{ env.binary_name }} .

      - name: Copy Artifact Linux
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: cp target/x86_64-unknown-linux-musl/release/${{ env.binary_name }} .

      - name: Dryrun binary
        if: ${{ github.event_name }} == pull_request
        shell: bash
        env:
          RUST_LOG: DEBUG
          GH_TOKEN: ${{ github.token }}
          PUSH_TOKEN: ${{ github.token }}
        run: ./${{ env.binary_name }} "CHANGELOG.md" \
                                    "📝 Update [dep] from [old] to🚀 [new]🍄"
                                    "commit msg" \
                                    "github-actions[bot]" \
                                    "github-actions[bot]@users.noreply.github.com" \
                                    "Unreleased" \
                                    "section header 3" \
                                    "false"

  msrv:
      # check that we can build using the minimal rust version that is specified by this crate
      runs-on: ubuntu-latest
      # we use a matrix here just because env can't be used in job names
      # https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability
      strategy:
        matrix:
          msrv: ["1.81.0"]
      name: ubuntu / ${{ matrix.msrv }}
      steps:
        - uses: actions/checkout@v4
        - name: Install ${{ matrix.msrv }}
          uses: dtolnay/rust-toolchain@master
          with:
            toolchain: ${{ matrix.msrv }}
        - uses: Swatinem/rust-cache@v2

        - name: cargo +${{ matrix.msrv }} check
          run: cargo check

  release-if-version-bumped:
    needs: [checks, os-check, audit, typos, coverage, test-run, build, msrv]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/trunk' && success()
    permissions:
      contents: write # This is required to create and push tags

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_REPO }}

      - name: Get version from Cargo.toml
        id: get_version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | cut -d '"' -f 2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "Tag already exists"
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Tag does not exist"
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Trigger Release Workflow
        if: env.TAG_EXISTS == 'false'
        run: |
            gh workflow run release.yml \
            -f version=${{ env.VERSION }} \
            --ref ${{ github.ref }}
        env:
          GH_TOKEN: ${{ secrets.PAT_WITH_REPO_SCOPE }}
