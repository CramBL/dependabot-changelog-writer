name: Unit tests, linting, and formatting

on:
  push:
  pull_request:
    types: [opened, reopened]

jobs:
  checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Update Rust
        run: |
          rustup override set stable
          rustup update stable

      - name: Run tests
        run: cargo test

      - name: Lint
        run: cargo clippy

      - name: Check formatting
        run: cargo fmt --check

  test-run:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2

      - name: Build
        run: cargo build

      - name: Run fake
        if: ${{ github.event_name }} == pull_request
        env:
          RUST_LOG: DEBUG
          GH_TOKEN: ${{ github.token }}
          PUSH_TOKEN: ${{ github.token }}
        run: cargo run -- --dry-run "CHANGELOG.md" "Some commit message" "github-actions[bot]" "github-actions[bot]@users.noreply.github.com" "Unreleased" "section header 3"

  build:
    strategy:
      fail-fast: false
      matrix:
          os: [ ubuntu-latest, macos-latest, windows-latest ]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2

      - name: Install musl target
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: rustup target add x86_64-unknown-linux-musl

      - name: Install musl-tools
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools libssl-dev
          sudo ln -s /usr/include/x86_64-linux-gnu/asm /usr/include/x86_64-linux-musl/asm
          sudo ln -s /usr/include/asm-generic /usr/include/x86_64-linux-musl/asm-generic
          sudo ln -s /usr/include/linux /usr/include/x86_64-linux-musl/linux

          mkdir musl_build
          MUSL_OPENSSL_BUILD_DIR=$(readlink -f musl_build)
          wget https://github.com/openssl/openssl/archive/OpenSSL_1_1_1f.tar.gz
          tar zxvf OpenSSL_1_1_1f.tar.gz
          cd openssl-OpenSSL_1_1_1f/

          CC="musl-gcc -fPIE -pie" ./Configure no-shared no-async --prefix=${MUSL_OPENSSL_BUILD_DIR} --openssldir=${MUSL_OPENSSL_BUILD_DIR}/ssl linux-x86_64
          make depend
          make -j$(nproc)
          make install

      - name: Build linux musl
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          export OPENSSL_DIR=$(readlink -f musl_build)
          cargo build --release --target x86_64-unknown-linux-musl
        env:
         PKG_CONFIG_ALLOW_CROSS: 1
         OPENSSL_STATIC: true

      - name: Build macos
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          export OPENSSL_INCLUDE_DIR=$(brew --prefix openssl)/include
          export OPENSSL_LIB_DIR=$(brew --prefix openssl)/lib
          cargo build --release

      - name: Build windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: cargo build --release

