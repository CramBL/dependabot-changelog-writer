name: dependabot-changelog-writer
description: Generate a changelog entry from a dependabot PR
author: Marc Beck KÃ¶nig <mbkj@tutamail.com>
inputs:
  changelog:
    description: "Location of the changelog relative to the project root"
    required: false
    default: "./CHANGELOG.md"
  commit_message:
    description: "The commit message for the changelog entry"
    required: false
    default: "Updated changelog with updated dependencies"
  committer_name:
    description: The name of the custom committer you want to use
    required: false
    default: github-actions[bot]
  committer_email:
    description: The email of the custom committer you want to use
    required: false
    default: github-actions[bot]@users.noreply.github.com
  version:
    description: "The version/H1 header to find in the CHANGELOG to add dependabot entries to"
    required: true
    default: "unreleased"
  section_header:
    description: The section header to add the changelog entry under
    required: false
    default: "Dependencies"
  push_changes:
    description: "Whether or not to add, commit, & push the modified changelog"
    required: false
    default: "true"

  push_token:
    description: "The GitHub token to use for git push, defaults to workflow token"
    required: true
    default: ${{ github.token }}

  action_download_token:
    description: "The GitHub token to use for downloading the action, defaults to workflow token"
    required: true
    default: ${{ github.token }}

outputs:
  error:
    description: "The description of any error that occurred"
    value: ${{ steps.run.outputs.error }}

runs:
  using: "composite"
  steps:
    - name: Set reusable variables
      shell: bash
      run: |
        echo "action_repo=dependabot-changelog-writer" >> $GITHUB_ENV
        echo "action_org=CramBL" >> $GITHUB_ENV
        echo "binary_name=dependabot-changelog-writer" >> $GITHUB_ENV

    - name: Add binary extension
      shell: bash
      if: runner.os == 'Windows'
      run: echo "binary_name=${{ env.binary_name }}.exe" >> $GITHUB_ENV

    - name: Get Action Version
      id: get_action_version
      shell: pwsh
      run: |
        $finalComponent = Split-Path -Leaf ${{ github.action_path }}
        if ($finalComponent -eq "${{ env.action_repo }}") {
          $version = ""
        } else {
          $version = $finalComponent
        }
        Write-Output "version=$version" >> $Env:GITHUB_OUTPUT

    - name: Download Action
      shell: bash
      run: |
        gh release download ${{ steps.get_action_version.outputs.version }} --repo ${{ env.action_org }}/${{ env.action_repo }} --pattern '${{ runner.os }}.tgz'
        tar -xzf ${{ runner.os }}.tgz
      env:
        GH_TOKEN: ${{ inputs.action_download_token }}

    - name: Run Action
      shell: bash
      id: run
      run: ./${{ runner.os }}/${{ env.binary_name }} "${{ inputs.changelog }}" "${{ inputs.commit_message }}" "${{ inputs.committer_name }}" "${{ inputs.committer_email }}" "${{ inputs.version }}" "${{ inputs.section_header }}" "${{ inputs.push_changes }}"
      env:
        GH_TOKEN: ${{ inputs.action_download_token }}
        PUSH_TOKEN: ${{ inputs.push_token }}
