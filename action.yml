name: dependabot-changelog-writer
description: Generate a changelog entry from a dependabot PR
author: Marc Beck König <mbkj@tutamail.com>
inputs:
  changelog:
    description: 'Path of the changelog relative to the project root'
    required: true
    default: './CHANGELOG.md'
  changelog-entry-pattern:
    description: >
      Template string defining how dependency updates are formatted in changelog entries.
      Uses [dep], [old], [new] as placeholder tokens for dependency name, old version, 
      and new version respectively. Tokens must appear in order: [dep], [old], [new].

      Examples:
      - Pattern: '[dep]: [old] → [new]' produces 'npm: 1.0 → 1.2'
      - Pattern: 'Bump [dep] from [old] to [new]' produces 'Bump npm from 1.0 to 1.2'
    required: true
    default: '[dep]: [old] → [new]'
  commit-message:
    description: 'The commit message for the changelog entry'
    required: true
    default: 'Updated changelog with updated dependencies'
  committer-name:
    description: 'The name of the custom committer you want to use'
    required: true
    default: 'github-actions[bot]'
  committer-email:
    description: 'The email of the custom committer you want to use'
    required: true
    default: 'github-actions[bot]@users.noreply.github.com'
  version:
    description: >
      The version/H2 header to find in the CHANGELOG to add dependabot entries to 
      matches whether or not the version is in brackets e.g. [0.1.0] and 0.1.0 are
      both valid. if set to 'unreleased' it will match 'unreleased' case-insensitive.
    required: true
    default: 'unreleased'
  section-header:
    description: 'The section header to add the changelog entry under'
    required: true
    default: 'Dependencies'
  push-changes:
    description: 'Whether or not to add, commit, & push the modified changelog. Note: If no changes are made, no commit is made either.'
    required: true
    default: true

  push-token:
    description: 'The GitHub token to use for git push, defaults to workflow token'
    required: true
    default: ${{ github.token }}
  action-download-token:
    description: 'The GitHub token to use for downloading the action, defaults to workflow token'
    required: true
    default: ${{ github.token }}

runs:
  using: "composite"
  steps:
    - name: Set reusable variables
      shell: bash
      run: |
        echo "action_repo=dependabot-changelog-writer" >> $GITHUB_ENV
        echo "action_org=CramBL" >> $GITHUB_ENV
        echo "binary_name=dependabot-changelog-writer" >> $GITHUB_ENV

    - name: Add binary extension
      shell: bash
      if: runner.os == 'Windows'
      run: echo "binary_name=${{ env.binary_name }}.exe" >> $GITHUB_ENV

    # Extracts the version from the action_path to use for downloading the matching release
    # in the next step. If the final component is this repo, it means we are running the
    # integration test, so we set the version to empty string which makes the next step
    # download the latest release. We also download latest if the action is set to "@latest"
    - name: Get Action Version
      id: get_action_version
      shell: bash
      run: |
        action_path="${{ github.action_path }}"
        clean_action_path=${action_path%/./}
        action_path_final_component=${clean_action_path##*/}
        if [ "${action_path_final_component}" == "${{ env.action_repo }}" ] || [ "${action_path_final_component}" == "trunk" ]; then
            version=""
        else
            version="${action_path_final_component}"
        fi
        echo "version=$version" >> $GITHUB_OUTPUT

    - name: Download Action
      shell: bash
      run: |
        gh release download ${{ steps.get_action_version.outputs.version }} --repo ${{ env.action_org }}/${{ env.action_repo }} --pattern '${{ runner.os }}.tgz'
        tar -xzf ${{ runner.os }}.tgz
      env:
        GH_TOKEN: ${{ inputs.action-download-token }}

    - name: Run Action
      shell: bash
      id: run
      run: ./${{ runner.os }}/${{ env.binary_name }} "${{ inputs.changelog }}" "${{ inputs.update-entry-pattern }}" "${{ inputs.commit-message }}" "${{ inputs.committer-name }}" "${{ inputs.committer-email }}" "${{ inputs.version }}" "${{ inputs.section-header }}" "${{ inputs.push-changes }}"
      env:
        GH_TOKEN: ${{ inputs.action-download-token }}
        PUSH_TOKEN: ${{ inputs.push-token }}
